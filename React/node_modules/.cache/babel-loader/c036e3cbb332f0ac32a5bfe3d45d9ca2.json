{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Todo_test.js\";\nimport React, { useState } from \"react\";\nimport { Box, Grommet, CheckBox, Button } from \"grommet\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\";\nimport { useQuery } from \"@apollo/client\";\nimport { Trash } from \"grommet-icons\";\n\nfunction Todotest() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TASK);\n  const [checked, setChecked] = useState(false); //const [isBtnHide, setIsBtnHide] = useState(true);\n\n  const onChange = e => {\n    setChecked(!checked);\n    console.log(checked);\n  };\n\n  const deletebutton = checked === true ? /*#__PURE__*/React.createElement(Button, {\n    plain: false,\n    icon: /*#__PURE__*/React.createElement(Trash, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 35\n      }\n    }),\n    margin: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }) : null;\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, \"Todo\"), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, data.tasks.map(task => {\n    return /*#__PURE__*/React.createElement(CheckBox, {\n      key: task.id,\n      checked: checked[task.id],\n      label: task.task,\n      onChange: checked => onChange(checked),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    });\n  })), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, deletebutton));\n}\n\nexport default Todotest;\n/*\nreturn (\n  <>\n    <h2>好きな食べ物</h2>\n    <form>\n      {checkLists.map((item, index) => {\n        index = index + 1;\n        return (\n          <label htmlFor={`id_${index}`} key={`key_${index}`}>\n            <CheckBox\n              id={`id_${index}`}\n              value={item}\n              onChange={handleChange}\n              checked={checkedItems[item.id]}\n            />\n            {item}\n          </label>\n        );\n      })}\n      \n \n      {!isBtnHide && (\n        <button onClick={dataSendBtn}>アンケート送信ボタン</button>\n      )}\n    </form>\n  </>\n);\n*/","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Todo_test.js"],"names":["React","useState","Box","Grommet","CheckBox","Button","EDIT_TASK_COMPLETED","TASK","DELETE_TASK","PART_TASK","useQuery","Trash","Todotest","loading","error","data","checked","setChecked","onChange","e","console","log","deletebutton","tasks","map","task","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,QAAvB,EAAiCC,MAAjC,QAA+C,SAA/C;AACA,SAASC,mBAAT,EAA8BC,IAA9B,EAAoCC,WAApC,EAAiDC,SAAjD,QAAkE,SAAlE;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,KAAT,QAAsB,eAAtB;;AAEA,SAASC,QAAT,GAAoB;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BL,QAAQ,CAACH,IAAD,CAAzC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC,CAFkB,CAGlB;;AAEA,QAAMiB,QAAQ,GAAIC,CAAD,IAAO;AACtBF,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACD,GAHD;;AAKA,QAAMM,YAAY,GAChBN,OAAO,KAAK,IAAZ,gBACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,KAAf;AAAsB,IAAA,IAAI,eAAE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5B;AAAoD,IAAA,MAAM,EAAC,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAEI,IAHN;AAKA,MAAIH,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,sBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACQ,KAAL,CAAWC,GAAX,CAAgBC,IAAD,IAAU;AACxB,wBACE,oBAAC,QAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACC,EADZ;AAEE,MAAA,OAAO,EAAEV,OAAO,CAACS,IAAI,CAACC,EAAN,CAFlB;AAGE,MAAA,KAAK,EAAED,IAAI,CAACA,IAHd;AAIE,MAAA,QAAQ,EAAGT,OAAD,IAAaE,QAAQ,CAACF,OAAD,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD,GATA,CADH,CAFF,eAcE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMM,YAAN,CAdF,CADF;AAkBD;;AAED,eAAeV,QAAf;AAEA","sourcesContent":["import React, { useState } from \"react\";\nimport { Box, Grommet, CheckBox, Button } from \"grommet\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\";\nimport { useQuery } from \"@apollo/client\";\nimport { Trash } from \"grommet-icons\";\n\nfunction Todotest() {\n  const { loading, error, data } = useQuery(TASK);\n  const [checked, setChecked] = useState(false);\n  //const [isBtnHide, setIsBtnHide] = useState(true);\n\n  const onChange = (e) => {\n    setChecked(!checked);\n    console.log(checked);\n  };\n\n  const deletebutton =\n    checked === true ? (\n      <Button plain={false} icon={<Trash size=\"small\" />} margin=\"small\" />\n    ) : null;\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <p>Todo</p>\n      <Box>\n        {data.tasks.map((task) => {\n          return (\n            <CheckBox\n              key={task.id}\n              checked={checked[task.id]}\n              label={task.task}\n              onChange={(checked) => onChange(checked)}\n            />\n          );\n        })}\n      </Box>\n      <Box>{deletebutton}</Box>\n    </Grommet>\n  );\n}\n\nexport default Todotest;\n\n/*\nreturn (\n  <>\n    <h2>好きな食べ物</h2>\n    <form>\n      {checkLists.map((item, index) => {\n        index = index + 1;\n        return (\n          <label htmlFor={`id_${index}`} key={`key_${index}`}>\n            <CheckBox\n              id={`id_${index}`}\n              value={item}\n              onChange={handleChange}\n              checked={checkedItems[item.id]}\n            />\n            {item}\n          </label>\n        );\n      })}\n      \n \n      {!isBtnHide && (\n        <button onClick={dataSendBtn}>アンケート送信ボタン</button>\n      )}\n    </form>\n  </>\n);\n*/\n"]},"metadata":{},"sourceType":"module"}