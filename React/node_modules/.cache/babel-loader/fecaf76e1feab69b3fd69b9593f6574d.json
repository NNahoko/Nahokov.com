{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Todo_test.js\";\nimport React, { useState } from \"react\";\nimport { Box, Grommet, CheckBox, Button } from \"grommet\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\";\nimport { useQuery } from \"@apollo/client\";\nimport { Trash } from \"grommet-icons\";\n\nfunction Todotest() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TASK);\n  const [checked, setChecked] = useState({}); //const [isBtnHide, setIsBtnHide] = useState(true);\n\n  const onChange = e => {\n    setChecked(e.target.checked.checked);\n    console.log(checked);\n  };\n\n  const handleChange = e => {\n    //checkedItemsのstateをセット\n    setChecked({ ...checked,\n      [e.target.id]: e.target.checked\n    });\n  };\n\n  const deletebutton = checked === true ? /*#__PURE__*/React.createElement(Button, {\n    plain: false,\n    icon: /*#__PURE__*/React.createElement(Trash, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 35\n      }\n    }),\n    margin: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }) : null;\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, data.tasks.map(task => /*#__PURE__*/React.createElement(CheckBox, {\n    key: task.id,\n    checked: checked,\n    label: task.task,\n    onChange: checked => onChange(checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, deletebutton));\n}\n\nexport default Todotest;","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Todo_test.js"],"names":["React","useState","Box","Grommet","CheckBox","Button","EDIT_TASK_COMPLETED","TASK","DELETE_TASK","PART_TASK","useQuery","Trash","Todotest","loading","error","data","checked","setChecked","onChange","e","target","console","log","handleChange","id","deletebutton","tasks","map","task"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,QAAvB,EAAiCC,MAAjC,QAA+C,SAA/C;AACA,SAASC,mBAAT,EAA8BC,IAA9B,EAAoCC,WAApC,EAAiDC,SAAjD,QAAkE,SAAlE;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,KAAT,QAAsB,eAAtB;;AAEA,SAASC,QAAT,GAAoB;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BL,QAAQ,CAACH,IAAD,CAAzC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,EAAD,CAAtC,CAFkB,CAGlB;;AAEA,QAAMiB,QAAQ,GAAIC,CAAD,IAAO;AACtBF,IAAAA,UAAU,CAACE,CAAC,CAACC,MAAF,CAASJ,OAAT,CAAiBA,OAAlB,CAAV;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACD,GAHD;;AAKA,QAAMO,YAAY,GAAIJ,CAAD,IAAO;AAC1B;AACAF,IAAAA,UAAU,CAAC,EACT,GAAGD,OADM;AAET,OAACG,CAAC,CAACC,MAAF,CAASI,EAAV,GAAeL,CAAC,CAACC,MAAF,CAASJ;AAFf,KAAD,CAAV;AAID,GAND;;AAQA,QAAMS,YAAY,GAChBT,OAAO,KAAK,IAAZ,gBACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,KAAf;AAAsB,IAAA,IAAI,eAAE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5B;AAAoD,IAAA,MAAM,EAAC,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAEI,IAHN;AAKA,MAAIH,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,sBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACW,KAAL,CAAWC,GAAX,CAAgBC,IAAD,iBACd,oBAAC,QAAD;AACE,IAAA,GAAG,EAAEA,IAAI,CAACJ,EADZ;AAEE,IAAA,OAAO,EAAER,OAFX;AAGE,IAAA,KAAK,EAAEY,IAAI,CAACA,IAHd;AAIE,IAAA,QAAQ,EAAGZ,OAAD,IAAaE,QAAQ,CAACF,OAAD,CAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF,eAWE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMS,YAAN,CAXF,CADF;AAeD;;AAED,eAAeb,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Box, Grommet, CheckBox, Button } from \"grommet\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\";\nimport { useQuery } from \"@apollo/client\";\nimport { Trash } from \"grommet-icons\";\n\nfunction Todotest() {\n  const { loading, error, data } = useQuery(TASK);\n  const [checked, setChecked] = useState({});\n  //const [isBtnHide, setIsBtnHide] = useState(true);\n\n  const onChange = (e) => {\n    setChecked(e.target.checked.checked);\n    console.log(checked);\n  };\n\n  const handleChange = (e) => {\n    //checkedItemsのstateをセット\n    setChecked({\n      ...checked,\n      [e.target.id]: e.target.checked,\n    });\n  };\n\n  const deletebutton =\n    checked === true ? (\n      <Button plain={false} icon={<Trash size=\"small\" />} margin=\"small\" />\n    ) : null;\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <Box>\n        {data.tasks.map((task) => (\n          <CheckBox\n            key={task.id}\n            checked={checked}\n            label={task.task}\n            onChange={(checked) => onChange(checked)}\n          />\n        ))}\n      </Box>\n      <Box>{deletebutton}</Box>\n    </Grommet>\n  );\n}\n\nexport default Todotest;\n"]},"metadata":{},"sourceType":"module"}