{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Todolist_2.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { Trash } from \"grommet-icons\";\nimport { Table, TableBody, TableCell, TableHeader, TableRow, Text, Grommet, Button, Box, CheckBox } from \"grommet\";\nconst COLUMNS = [{\n  property: \"task\",\n  label: \"Task\",\n  format: task => /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 23\n    }\n  }, task.task)\n}, {\n  property: \"limit\",\n  label: \"Limit\"\n}];\n\nfunction TodoList_2() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TASK);\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{\n      query: TASK\n    }]\n  });\n\n  const deleteTasks = id => {\n    deleteTask({\n      variables: {\n        id\n      }\n    });\n  }; //checkedItemsは初期値を空のオブジェクトにする\n\n\n  const [checkedItems, setCheckedItems] = useState({}); //ひとつでもcheckedになっている場合にのみ送信ボタンを表示させたいので、全体のStateを監視する\n\n  const [isBtnHide, setIsBtnHide] = useState(true); //const { loading, error, data } = useQuery(TASK);\n\n  useEffect(() => {\n    //checkedItemsが空では無い場合、送信ボタンを表示させる\n    Object.keys(checkedItems).length && setIsBtnHide(false); //すべてのcheckedItemの値がfalseの場合に送信ボタンを表示させる\n\n    setTimeout(() => {\n      if (Object.values(checkedItems).every(checkedItem => {\n        return checkedItem === false;\n      })) {\n        setIsBtnHide(true);\n      }\n    }, 100);\n  }, [checkedItems]);\n\n  const handleChange = e => {\n    //checkedItemsのstateをセット\n    setCheckedItems({ ...checkedItems,\n      [e.target.id]: e.target.checked\n    });\n    console.log(\"checkedItems:\", checkedItems);\n  };\n\n  const deletetask = e => {\n    console.log(checkedItems);\n    const dataPushArray = Object.entries(checkedItems);\n    console.log(dataPushArray);\n    const test = dataPushArray.map(item => {\n      deleteTasks(item[0]);\n    });\n    console.log(checkedItems);\n    setCheckedItems({});\n  };\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    fill: true,\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    overflow: {\n      vertical: \"scroll\",\n      horizontal: \"auto\"\n    },\n    height: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    sortable: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, COLUMNS.map(c => /*#__PURE__*/React.createElement(TableCell, {\n    key: c.property,\n    scope: \"col\",\n    border: \"bottom\",\n    align: c.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }, c.label))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, data.tasks.map(task => /*#__PURE__*/React.createElement(TableRow, {\n    key: task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, COLUMNS.map(c => /*#__PURE__*/React.createElement(TableCell, {\n    scope: \"col\",\n    border: \"bottom\",\n    key: c.property,\n    align: c.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 23\n    }\n  }, c.format ? c.format(task) : task[c.property]))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CheckBox, {\n    id: task.id,\n    value: task,\n    checked: checkedItems[task.id],\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }))))))), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, !isBtnHide && /*#__PURE__*/React.createElement(Button, {\n    plain: false,\n    icon: /*#__PURE__*/React.createElement(Trash, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }),\n    margin: \"small\",\n    onClick: deletetask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default TodoList_2;","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Todolist_2.js"],"names":["React","useState","useEffect","EDIT_TASK_COMPLETED","TASK","DELETE_TASK","PART_TASK","useQuery","useMutation","Trash","Table","TableBody","TableCell","TableHeader","TableRow","Text","Grommet","Button","Box","CheckBox","COLUMNS","property","label","format","task","TodoList_2","loading","error","data","deleteTask","refetchQueries","query","deleteTasks","id","variables","checkedItems","setCheckedItems","isBtnHide","setIsBtnHide","Object","keys","length","setTimeout","values","every","checkedItem","handleChange","e","target","checked","console","log","deletetask","dataPushArray","entries","test","map","item","vertical","horizontal","c","align","tasks"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { Trash } from \"grommet-icons\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Text,\n  Grommet,\n  Button,\n  Box,\n  CheckBox,\n} from \"grommet\";\n\nconst COLUMNS = [\n  {\n    property: \"task\",\n    label: \"Task\",\n    format: (task) => <strong>{task.task}</strong>,\n  },\n  {\n    property: \"limit\",\n    label: \"Limit\",\n  },\n];\n\nfunction TodoList_2() {\n  const { loading, error, data } = useQuery(TASK);\n\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  const deleteTasks = (id) => {\n    deleteTask({ variables: { id } });\n  };\n\n  //checkedItemsは初期値を空のオブジェクトにする\n  const [checkedItems, setCheckedItems] = useState({});\n  //ひとつでもcheckedになっている場合にのみ送信ボタンを表示させたいので、全体のStateを監視する\n  const [isBtnHide, setIsBtnHide] = useState(true);\n\n  //const { loading, error, data } = useQuery(TASK);\n\n  useEffect(() => {\n    //checkedItemsが空では無い場合、送信ボタンを表示させる\n    Object.keys(checkedItems).length && setIsBtnHide(false);\n    //すべてのcheckedItemの値がfalseの場合に送信ボタンを表示させる\n    setTimeout(() => {\n      if (\n        Object.values(checkedItems).every((checkedItem) => {\n          return checkedItem === false;\n        })\n      ) {\n        setIsBtnHide(true);\n      }\n    }, 100);\n  }, [checkedItems]);\n\n  const handleChange = (e) => {\n    //checkedItemsのstateをセット\n    setCheckedItems({\n      ...checkedItems,\n      [e.target.id]: e.target.checked,\n    });\n    console.log(\"checkedItems:\", checkedItems);\n  };\n\n  const deletetask = (e) => {\n    console.log(checkedItems);\n    const dataPushArray = Object.entries(checkedItems);\n    console.log(dataPushArray);\n\n    const test = dataPushArray.map((item) => {\n      deleteTasks(item[0]);\n    });\n    console.log(checkedItems);\n    setCheckedItems({});\n  };\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <Box fill align=\"center\" justify=\"center\">\n        <Box\n          overflow={{ vertical: \"scroll\", horizontal: \"auto\" }}\n          height=\"medium\"\n        >\n          <Table sortable=\"true\">\n            <TableHeader>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    scope=\"col\"\n                    border=\"bottom\"\n                    align={c.align}\n                  >\n                    <Text>{c.label}</Text>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.tasks.map((task) => (\n                <TableRow key={task.id}>\n                  {COLUMNS.map((c) => (\n                    <TableCell\n                      scope=\"col\"\n                      border=\"bottom\"\n                      key={c.property}\n                      align={c.align}\n                    >\n                      <Text>\n                        {c.format ? c.format(task) : task[c.property]}\n                      </Text>\n                    </TableCell>\n                  ))}\n                  <TableCell>\n                    <CheckBox\n                      id={task.id}\n                      value={task}\n                      checked={checkedItems[task.id]}\n                      onChange={handleChange}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n        <Box>\n          {!isBtnHide && (\n            <Button\n              plain={false}\n              icon={<Trash size=\"small\" />}\n              margin=\"small\"\n              onClick={deletetask}\n            />\n          )}\n        </Box>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default TodoList_2;\n"]},"metadata":{},"sourceType":"module"}