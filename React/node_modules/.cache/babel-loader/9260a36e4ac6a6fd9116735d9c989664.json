{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Home.js\";\nimport React from \"react\";\nimport { Grommet, Main, Text, Image, Box } from \"grommet\";\nimport image from \"./image/IMG_9079.jpg\";\nimport { useQuery, gql } from \"@apollo/client\";\nexport const PART_TASK = gql`\n  query partTask($id: ID!) {\n    task(id: $id) {\n      id\n      completed\n    }\n  }\n`;\n\nfunction Home() {\n  //const { data } = useQuery(TASK);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(PART_TASK, {\n    variables: {\n      id: 14\n    }\n  });\n  console.log(data);\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, \"Wellcome!!!\")), /*#__PURE__*/React.createElement(Box, {\n    height: \"medium\",\n    width: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    fit: \"cover\",\n    src: image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Home;\n/*\n const { data } = useQuery(TASK);\n\n  const [updateTaskCompleted] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  updateTaskCompleted({ variables: { id: 14, completed: false } });\n*/","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Home.js"],"names":["React","Grommet","Main","Text","Image","Box","image","useQuery","gql","PART_TASK","Home","loading","error","data","variables","id","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCC,GAArC,QAAgD,SAAhD;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AAEA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,OAAO,MAAMC,SAAS,GAAGD,GAAI;;;;;;;CAAtB;;AASP,SAASE,IAAT,GAAgB;AACd;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CAACE,SAAD,EAAY;AACnDK,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAE;AAAN;AADwC,GAAZ,CAAzC;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,MAAIF,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,sBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,eAIE,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,OAAX;AAAmB,IAAA,GAAG,EAAEN,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,CADF;AAUD;;AAED,eAAeI,IAAf;AAEA","sourcesContent":["import React from \"react\";\nimport { Grommet, Main, Text, Image, Box } from \"grommet\";\nimport image from \"./image/IMG_9079.jpg\";\n\nimport { useQuery, gql } from \"@apollo/client\";\n\nexport const PART_TASK = gql`\n  query partTask($id: ID!) {\n    task(id: $id) {\n      id\n      completed\n    }\n  }\n`;\n\nfunction Home() {\n  //const { data } = useQuery(TASK);\n\n  const { loading, error, data } = useQuery(PART_TASK, {\n    variables: { id: 14 },\n  });\n  console.log(data);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <Main>\n        <Text>Wellcome!!!</Text>\n      </Main>\n      <Box height=\"medium\" width=\"large\">\n        <Image fit=\"cover\" src={image} />\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default Home;\n\n/*\n const { data } = useQuery(TASK);\n\n  const [updateTaskCompleted] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  updateTaskCompleted({ variables: { id: 14, completed: false } });\n*/\n"]},"metadata":{},"sourceType":"module"}