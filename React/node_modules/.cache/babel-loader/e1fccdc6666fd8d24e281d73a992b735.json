{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Home.js\";\nimport React from \"react\";\nimport { Grommet, Main, Text, Image, Box } from \"grommet\";\nimport image from \"./image/IMG_9079.jpg\";\nimport Example from \"./test\"; //import { gql, useQuery, useMutation } from \"@apollo/client\";\n//import gql from \"graphql-tag\";\n//import { useQuery } from \"@apollo/react-hooks\";\n\n/*\nconst TASK = gql`\n  query tasks {\n    tasks {\n      id\n      task\n      limit\n      completed\n    }\n  }\n`;\n*/\n\n/*\nconst PART_TASK = gql`\n  query task($id: ID!) {\n    task(id: $id) {\n      id\n      completed\n    }\n  }\n`;\n*/\n\n/*\nconst EDIT_TASK_COMPLETED = gql`\n  mutation UpdateTaskCompleted($id: ID!, $completed: Boolean) {\n    updateTaskCompleted(input: { id: $id, completed: $completed }) {\n      task {\n        id\n        completed\n      }\n    }\n  }\n`;\n*/\n\nfunction Home() {\n  /*const { loading, error, data } = useQuery(TASK);\n  \n  const [pastTask] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{ query: TASK }],\n  });\n   pastTask({ variables: { id: 14, completed: true } });\n  */\n\n  /* \n  const { data } = useQuery(PART_TASK, {\n    variables: { id: 14 },\n  });\n   console.log(data);\n  */\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"Wellcome!!!\")), /*#__PURE__*/React.createElement(Example, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    height: \"medium\",\n    width: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    fit: \"cover\",\n    src: image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Home;\n/*\n const { data } = useQuery(TASK);\n\n  const [updateTaskCompleted] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  updateTaskCompleted({ variables: { id: 14, completed: false } });\n*/","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Home.js"],"names":["React","Grommet","Main","Text","Image","Box","image","Example","Home"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCC,GAArC,QAAgD,SAAhD;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,OAAP,MAAoB,QAApB,C,CACA;AAEA;AACA;;AAEA;;;;;;;;;;;;;AAaA;;;;;;;;;;;AAWA;;;;;;;;;;;;;AAYA,SAASC,IAAT,GAAgB;AACd;;;;;;;;AAQA;;;;;;AAOA,sBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,eAIE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAKE,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,OAAX;AAAmB,IAAA,GAAG,EAAEF,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CADF;AAWD;;AAED,eAAeE,IAAf;AAEA","sourcesContent":["import React from \"react\";\nimport { Grommet, Main, Text, Image, Box } from \"grommet\";\nimport image from \"./image/IMG_9079.jpg\";\nimport Example from \"./test\";\n//import { gql, useQuery, useMutation } from \"@apollo/client\";\n\n//import gql from \"graphql-tag\";\n//import { useQuery } from \"@apollo/react-hooks\";\n\n/*\nconst TASK = gql`\n  query tasks {\n    tasks {\n      id\n      task\n      limit\n      completed\n    }\n  }\n`;\n*/\n\n/*\nconst PART_TASK = gql`\n  query task($id: ID!) {\n    task(id: $id) {\n      id\n      completed\n    }\n  }\n`;\n*/\n\n/*\nconst EDIT_TASK_COMPLETED = gql`\n  mutation UpdateTaskCompleted($id: ID!, $completed: Boolean) {\n    updateTaskCompleted(input: { id: $id, completed: $completed }) {\n      task {\n        id\n        completed\n      }\n    }\n  }\n`;\n*/\nfunction Home() {\n  /*const { loading, error, data } = useQuery(TASK);\n  \n  const [pastTask] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  pastTask({ variables: { id: 14, completed: true } });\n */\n  /* \n const { data } = useQuery(PART_TASK, {\n    variables: { id: 14 },\n  });\n\n  console.log(data);\n*/\n  return (\n    <Grommet>\n      <Main>\n        <Text>Wellcome!!!</Text>\n      </Main>\n      <Example />\n      <Box height=\"medium\" width=\"large\">\n        <Image fit=\"cover\" src={image} />\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default Home;\n\n/*\n const { data } = useQuery(TASK);\n\n  const [updateTaskCompleted] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  updateTaskCompleted({ variables: { id: 14, completed: false } });\n*/\n"]},"metadata":{},"sourceType":"module"}