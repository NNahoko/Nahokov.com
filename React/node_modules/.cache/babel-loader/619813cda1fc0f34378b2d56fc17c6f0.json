{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Todo_test.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Box, Grommet, CheckBox, Button } from \"grommet\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\";\nimport { useQuery } from \"@apollo/client\";\nimport { Trash } from \"grommet-icons\";\n\nfunction Todotest() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TASK);\n  /*\n    const [checked, setChecked] = useState(false);\n  //const [isBtnHide, setIsBtnHide] = useState(true);\n   const onChange = () => {\n    setChecked(!checked);\n    console.log(checked);\n  };\n   const deletebutton =\n    checked === true ? (\n      <Button plain={false} icon={<Trash size=\"small\" />} margin=\"small\" />\n    ) : null;\n  */\n  //////////\n  //checkedItemsは初期値を空のオブジェクトにする\n\n  const [checkedItems, setCheckedItems] = useState({}); //ひとつでもcheckedになっている場合にのみ送信ボタンを表示させたいので、全体のStateを監視する\n\n  const [isBtnHide, setIsBtnHide] = useState(true); //const { loading, error, data } = useQuery(TASK);\n\n  useEffect(() => {\n    //checkedItemsが空では無い場合、送信ボタンを表示させる\n    Object.keys(checkedItems).length && setIsBtnHide(false); //すべてのcheckedItemの値がfalseの場合に送信ボタンを表示させる\n\n    setTimeout(() => {\n      if (Object.values(checkedItems).every(checkedItem => {\n        return checkedItem === false;\n      })) {\n        setIsBtnHide(true);\n      }\n    }, 100);\n  }, [checkedItems]);\n\n  const handleChange = e => {\n    //checkedItemsのstateをセット\n    setCheckedItems({ ...checkedItems,\n      [e.target.id]: e.target.checked\n    });\n    console.log(\"checkedItems:\", checkedItems);\n  };\n\n  const dataSendBtn = e => {\n    //既定のイベントをキャンセルさせる\n    e.preventDefault(); //送信ボタンを押したタイミングで、checkedItemsオブジェクトのvalueがtrueのkeyのみを配列にしてconsoleに表示させる\n\n    const dataPushArray = Object.entries(checkedItems).reduce((pre, [key, value]) => {\n      value && pre.push(key);\n      return pre;\n    }, []);\n    console.log(\"dataPushArray:\", dataPushArray);\n  }; //////////\n\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Todo\"), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, data.tasks.map(task => {\n    return /*#__PURE__*/React.createElement(CheckBox, {\n      key: task.id,\n      checked: checked[task.id],\n      label: task.task,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    });\n  }), !isBtnHide && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: dataSendBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"\\u30A2\\u30F3\\u30B1\\u30FC\\u30C8\\u9001\\u4FE1\\u30DC\\u30BF\\u30F3\")));\n}\n\nexport default Todotest;\n/*\nreturn (\n  <>\n    <h2>好きな食べ物</h2>\n    <form>\n      {checkLists.map((item, index) => {\n        index = index + 1;\n        return (\n          <label htmlFor={`id_${index}`} key={`key_${index}`}>\n            <CheckBox\n              id={`id_${index}`}\n              value={item}\n              onChange={handleChange}\n              checked={checkedItems[item.id]}\n            />\n            {item}\n          </label>\n        );\n      })}\n      \n \n      {!isBtnHide && (\n        <button onClick={dataSendBtn}>アンケート送信ボタン</button>\n      )}\n    </form>\n  </>\n);\n*/","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Todo_test.js"],"names":["React","useState","useEffect","Box","Grommet","CheckBox","Button","EDIT_TASK_COMPLETED","TASK","DELETE_TASK","PART_TASK","useQuery","Trash","Todotest","loading","error","data","checkedItems","setCheckedItems","isBtnHide","setIsBtnHide","Object","keys","length","setTimeout","values","every","checkedItem","handleChange","e","target","id","checked","console","log","dataSendBtn","preventDefault","dataPushArray","entries","reduce","pre","key","value","push","tasks","map","task"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Box, Grommet, CheckBox, Button } from \"grommet\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\";\nimport { useQuery } from \"@apollo/client\";\nimport { Trash } from \"grommet-icons\";\n\nfunction Todotest() {\n  const { loading, error, data } = useQuery(TASK);\n  /*\n    const [checked, setChecked] = useState(false);\n  //const [isBtnHide, setIsBtnHide] = useState(true);\n\n  const onChange = () => {\n    setChecked(!checked);\n    console.log(checked);\n  };\n\n  const deletebutton =\n    checked === true ? (\n      <Button plain={false} icon={<Trash size=\"small\" />} margin=\"small\" />\n    ) : null;\n*/\n  //////////\n\n  //checkedItemsは初期値を空のオブジェクトにする\n  const [checkedItems, setCheckedItems] = useState({});\n  //ひとつでもcheckedになっている場合にのみ送信ボタンを表示させたいので、全体のStateを監視する\n  const [isBtnHide, setIsBtnHide] = useState(true);\n\n  //const { loading, error, data } = useQuery(TASK);\n\n  useEffect(() => {\n    //checkedItemsが空では無い場合、送信ボタンを表示させる\n    Object.keys(checkedItems).length && setIsBtnHide(false);\n    //すべてのcheckedItemの値がfalseの場合に送信ボタンを表示させる\n    setTimeout(() => {\n      if (\n        Object.values(checkedItems).every((checkedItem) => {\n          return checkedItem === false;\n        })\n      ) {\n        setIsBtnHide(true);\n      }\n    }, 100);\n  }, [checkedItems]);\n\n  const handleChange = (e) => {\n    //checkedItemsのstateをセット\n    setCheckedItems({\n      ...checkedItems,\n      [e.target.id]: e.target.checked,\n    });\n    console.log(\"checkedItems:\", checkedItems);\n  };\n\n  const dataSendBtn = (e) => {\n    //既定のイベントをキャンセルさせる\n    e.preventDefault();\n    //送信ボタンを押したタイミングで、checkedItemsオブジェクトのvalueがtrueのkeyのみを配列にしてconsoleに表示させる\n    const dataPushArray = Object.entries(checkedItems).reduce(\n      (pre, [key, value]) => {\n        value && pre.push(key);\n        return pre;\n      },\n      []\n    );\n    console.log(\"dataPushArray:\", dataPushArray);\n  };\n  //////////\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <p>Todo</p>\n      <Box>\n        {data.tasks.map((task) => {\n          return (\n            <CheckBox\n              key={task.id}\n              checked={checked[task.id]}\n              label={task.task}\n              onChange={handleChange}\n            />\n          );\n        })}\n        {/* checkedがない場合には送信ボタンを表示させない */}\n        {!isBtnHide && (\n          <button onClick={dataSendBtn}>アンケート送信ボタン</button>\n        )}\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default Todotest;\n\n/*\nreturn (\n  <>\n    <h2>好きな食べ物</h2>\n    <form>\n      {checkLists.map((item, index) => {\n        index = index + 1;\n        return (\n          <label htmlFor={`id_${index}`} key={`key_${index}`}>\n            <CheckBox\n              id={`id_${index}`}\n              value={item}\n              onChange={handleChange}\n              checked={checkedItems[item.id]}\n            />\n            {item}\n          </label>\n        );\n      })}\n      \n \n      {!isBtnHide && (\n        <button onClick={dataSendBtn}>アンケート送信ボタン</button>\n      )}\n    </form>\n  </>\n);\n*/\n"]},"metadata":{},"sourceType":"module"}