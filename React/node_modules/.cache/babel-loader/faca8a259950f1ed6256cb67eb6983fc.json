{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/test.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\"; //checkboxのvalueリスト\n\nconst checkLists = [\"パン\", \"おにぎり\", \"焼き肉\", \"ラーメン\", \"たこ焼き\", \"アイスクリーム\"]; //checkboxコンポーネント\n\nconst CheckBox = ({\n  id,\n  value,\n  checked,\n  onChange\n}) => {\n  return /*#__PURE__*/React.createElement(\"input\", {\n    id: id,\n    type: \"checkbox\",\n    name: \"inputNames\",\n    checked: checked,\n    onChange: onChange,\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  });\n};\n\nconst CheckBoxList = () => {\n  //checkedItemsは初期値を空のオブジェクトにする\n  const [checkedItems, setCheckedItems] = useState({}); //ひとつでもcheckedになっている場合にのみ送信ボタンを表示させたいので、全体のStateを監視する\n\n  const [isBtnHide, setIsBtnHide] = useState(true);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TASK);\n  useEffect(() => {\n    //checkedItemsが空では無い場合、送信ボタンを表示させる\n    Object.keys(checkedItems).length && setIsBtnHide(false); //すべてのcheckedItemの値がfalseの場合に送信ボタンを表示させる\n\n    setTimeout(() => {\n      if (Object.values(checkedItems).every(checkedItem => {\n        return checkedItem === false;\n      })) {\n        setIsBtnHide(true);\n      }\n    }, 100);\n  }, [checkedItems]);\n\n  const handleChange = e => {\n    //checkedItemsのstateをセット\n    setCheckedItems({ ...checkedItems,\n      [e.target.id]: e.target.checked\n    });\n    console.log(\"checkedItems:\", checkedItems);\n  };\n\n  const dataSendBtn = e => {\n    //既定のイベントをキャンセルさせる\n    e.preventDefault(); //送信ボタンを押したタイミングで、checkedItemsオブジェクトのvalueがtrueのkeyのみを配列にしてconsoleに表示させる\n\n    const dataPushArray = Object.entries(checkedItems).reduce((pre, [key, value]) => {\n      value && pre.push(key);\n      return pre;\n    }, []);\n    console.log(\"dataPushArray:\", dataPushArray);\n  };\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"\\u597D\\u304D\\u306A\\u98DF\\u3079\\u7269\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, data.map((item, index) => {\n    index = index + 1;\n    return /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: `id_${index}`,\n      key: `key_${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CheckBox, {\n      id: `id_${index}`,\n      value: item,\n      onChange: handleChange,\n      checked: checkedItems[item.id],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }), item);\n  }), !isBtnHide && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: dataSendBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \"\\u30A2\\u30F3\\u30B1\\u30FC\\u30C8\\u9001\\u4FE1\\u30DC\\u30BF\\u30F3\")));\n};\n\nexport default CheckBoxList;","map":{"version":3,"sources":["/Users/n/my-app/src/Components/test.js"],"names":["React","useState","useEffect","useQuery","useMutation","EDIT_TASK_COMPLETED","TASK","DELETE_TASK","PART_TASK","checkLists","CheckBox","id","value","checked","onChange","CheckBoxList","checkedItems","setCheckedItems","isBtnHide","setIsBtnHide","loading","error","data","Object","keys","length","setTimeout","values","every","checkedItem","handleChange","e","target","console","log","dataSendBtn","preventDefault","dataPushArray","entries","reduce","pre","key","push","map","item","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,gBAAtC;AACA,SAASC,mBAAT,EAA8BC,IAA9B,EAAoCC,WAApC,EAAiDC,SAAjD,QAAkE,SAAlE,C,CAEA;;AACA,MAAMC,UAAU,GAAG,CACjB,IADiB,EAEjB,MAFiB,EAGjB,KAHiB,EAIjB,MAJiB,EAKjB,MALiB,EAMjB,SANiB,CAAnB,C,CASA;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,KAAN;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,CAAD,KAAsC;AACrD,sBACE;AACE,IAAA,EAAE,EAAEH,EADN;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,IAAI,EAAC,YAHP;AAIE,IAAA,OAAO,EAAEE,OAJX;AAKE,IAAA,QAAQ,EAAEC,QALZ;AAME,IAAA,KAAK,EAAEF,KANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAUD,CAXD;;AAaA,MAAMG,YAAY,GAAG,MAAM;AACzB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD,CAFyB,CAGzB;;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAM;AAAEmB,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BnB,QAAQ,CAACG,IAAD,CAAzC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACAqB,IAAAA,MAAM,CAACC,IAAP,CAAYR,YAAZ,EAA0BS,MAA1B,IAAoCN,YAAY,CAAC,KAAD,CAAhD,CAFc,CAGd;;AACAO,IAAAA,UAAU,CAAC,MAAM;AACf,UACEH,MAAM,CAACI,MAAP,CAAcX,YAAd,EAA4BY,KAA5B,CAAmCC,WAAD,IAAiB;AACjD,eAAOA,WAAW,KAAK,KAAvB;AACD,OAFD,CADF,EAIE;AACAV,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,KARS,EAQP,GARO,CAAV;AASD,GAbQ,EAaN,CAACH,YAAD,CAbM,CAAT;;AAeA,QAAMc,YAAY,GAAIC,CAAD,IAAO;AAC1B;AACAd,IAAAA,eAAe,CAAC,EACd,GAAGD,YADW;AAEd,OAACe,CAAC,CAACC,MAAF,CAASrB,EAAV,GAAeoB,CAAC,CAACC,MAAF,CAASnB;AAFV,KAAD,CAAf;AAIAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BlB,YAA7B;AACD,GAPD;;AASA,QAAMmB,WAAW,GAAIJ,CAAD,IAAO;AACzB;AACAA,IAAAA,CAAC,CAACK,cAAF,GAFyB,CAGzB;;AACA,UAAMC,aAAa,GAAGd,MAAM,CAACe,OAAP,CAAetB,YAAf,EAA6BuB,MAA7B,CACpB,CAACC,GAAD,EAAM,CAACC,GAAD,EAAM7B,KAAN,CAAN,KAAuB;AACrBA,MAAAA,KAAK,IAAI4B,GAAG,CAACE,IAAJ,CAASD,GAAT,CAAT;AACA,aAAOD,GAAP;AACD,KAJmB,EAKpB,EALoB,CAAtB;AAOAP,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BG,aAA9B;AACD,GAZD;;AAcA,MAAIjB,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACqB,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzBA,IAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACA,wBACE;AAAO,MAAA,OAAO,EAAG,MAAKA,KAAM,EAA5B;AAA+B,MAAA,GAAG,EAAG,OAAMA,KAAM,EAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AACE,MAAA,EAAE,EAAG,MAAKA,KAAM,EADlB;AAEE,MAAA,KAAK,EAAED,IAFT;AAGE,MAAA,QAAQ,EAAEd,YAHZ;AAIE,MAAA,OAAO,EAAEd,YAAY,CAAC4B,IAAI,CAACjC,EAAN,CAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOGiC,IAPH,CADF;AAWD,GAbA,CADH,EAgBG,CAAC1B,SAAD,iBACC;AAAQ,IAAA,OAAO,EAAEiB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEAjBJ,CAFF,CADF;AAyBD,CA1ED;;AA4EA,eAAepB,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\";\n\n//checkboxのvalueリスト\nconst checkLists = [\n  \"パン\",\n  \"おにぎり\",\n  \"焼き肉\",\n  \"ラーメン\",\n  \"たこ焼き\",\n  \"アイスクリーム\",\n];\n\n//checkboxコンポーネント\nconst CheckBox = ({ id, value, checked, onChange }) => {\n  return (\n    <input\n      id={id}\n      type=\"checkbox\"\n      name=\"inputNames\"\n      checked={checked}\n      onChange={onChange}\n      value={value}\n    />\n  );\n};\n\nconst CheckBoxList = () => {\n  //checkedItemsは初期値を空のオブジェクトにする\n  const [checkedItems, setCheckedItems] = useState({});\n  //ひとつでもcheckedになっている場合にのみ送信ボタンを表示させたいので、全体のStateを監視する\n  const [isBtnHide, setIsBtnHide] = useState(true);\n\n  const { loading, error, data } = useQuery(TASK);\n\n  useEffect(() => {\n    //checkedItemsが空では無い場合、送信ボタンを表示させる\n    Object.keys(checkedItems).length && setIsBtnHide(false);\n    //すべてのcheckedItemの値がfalseの場合に送信ボタンを表示させる\n    setTimeout(() => {\n      if (\n        Object.values(checkedItems).every((checkedItem) => {\n          return checkedItem === false;\n        })\n      ) {\n        setIsBtnHide(true);\n      }\n    }, 100);\n  }, [checkedItems]);\n\n  const handleChange = (e) => {\n    //checkedItemsのstateをセット\n    setCheckedItems({\n      ...checkedItems,\n      [e.target.id]: e.target.checked,\n    });\n    console.log(\"checkedItems:\", checkedItems);\n  };\n\n  const dataSendBtn = (e) => {\n    //既定のイベントをキャンセルさせる\n    e.preventDefault();\n    //送信ボタンを押したタイミングで、checkedItemsオブジェクトのvalueがtrueのkeyのみを配列にしてconsoleに表示させる\n    const dataPushArray = Object.entries(checkedItems).reduce(\n      (pre, [key, value]) => {\n        value && pre.push(key);\n        return pre;\n      },\n      []\n    );\n    console.log(\"dataPushArray:\", dataPushArray);\n  };\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <>\n      <h2>好きな食べ物</h2>\n      <form>\n        {data.map((item, index) => {\n          index = index + 1;\n          return (\n            <label htmlFor={`id_${index}`} key={`key_${index}`}>\n              <CheckBox\n                id={`id_${index}`}\n                value={item}\n                onChange={handleChange}\n                checked={checkedItems[item.id]}\n              />\n              {item}\n            </label>\n          );\n        })}\n        {/* checkedがない場合には送信ボタンを表示させない */}\n        {!isBtnHide && (\n          <button onClick={dataSendBtn}>アンケート送信ボタン</button>\n        )}\n      </form>\n    </>\n  );\n};\n\nexport default CheckBoxList;\n"]},"metadata":{},"sourceType":"module"}