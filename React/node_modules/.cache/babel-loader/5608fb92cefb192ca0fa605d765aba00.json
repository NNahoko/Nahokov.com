{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Todolist.js\";\nimport React from \"react\";\nimport { Grommet, Box, Heading, Grid, Table, TableBody, TableCell, TableFooter, TableHeader, TableRow, Text, CheckBox, List, Button } from \"grommet\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { TASK, DELETE_TASK } from \"./Query\";\nconst COLUMNS = [{\n  property: \"task\",\n  label: \"TASK\",\n  format: task => /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 23\n    }\n  }, task.task)\n}, {\n  property: \"limit\",\n  label: \"LIMIT\"\n}];\n\nfunction TodoList() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TASK);\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{\n      query: TASK\n    }]\n  });\n\n  const deletetask = id => {\n    deleteTask({\n      variables: {\n        id\n      }\n    });\n  };\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    fill: true,\n    rows: [\"auto\", \"flex\", \"auto\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    align: \"center\",\n    tag: \"header\",\n    pad: \"medium\",\n    color: \"#00739D\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    margin: \"none\",\n    color: \"#00739D\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, \"My TodoList\")), /*#__PURE__*/React.createElement(Box, {\n    overflow: {\n      vertical: \"scroll\",\n      horizontal: \"auto\"\n    },\n    height: \"medium\",\n    width: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    sortable: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, COLUMNS.map(c => /*#__PURE__*/React.createElement(TableCell, {\n    key: c.property,\n    scope: \"col\",\n    border: \"bottom\",\n    align: c.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, c.label))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, data.tasks.map(task => /*#__PURE__*/React.createElement(TableRow, {\n    key: task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, COLUMNS.map(c => /*#__PURE__*/React.createElement(TableCell, {\n    scope: \"col\",\n    border: \"bottom\",\n    key: c.property,\n    align: c.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 23\n    }\n  }, c.format ? c.format(task) : task[c.property]))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    alignSelf: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CheckBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 23\n    }\n  }))))))))));\n}\n/*\n  return (\n    <Grommet>\n      <Grid fill rows={[\"auto\", \"flex\", \"auto\"]}>\n        <Box align=\"center\" tag=\"header\" pad=\"medium\" color=\"#00739D\">\n          <Heading margin=\"none\" color=\"#00739D\" size=\"small\">\n            My TodoList\n          </Heading>\n        </Box>\n        <Box\n          overflow={{ vertical: \"scroll\", horizontal: \"auto\" }}\n          height=\"medium\"\n          width=\"medium\"\n        >\n          <Table sortable=\"true\">\n            <TableHeader>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    scope=\"col\"\n                    border=\"bottom\"\n                    align={c.align}\n                  >\n                    <Text>{c.label}</Text>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.tasks.map((task) => (\n                <TableRow key={task.id}>\n                  {COLUMNS.map((c) => (\n                    <TableCell\n                      scope=\"col\"\n                      border=\"bottom\"\n                      key={c.property}\n                      scope={c.dataScope}\n                      align={c.align}\n                    >\n                      <Text>\n                        {c.format ? c.format(task) : task[c.property]}\n                      </Text>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    border=\"top\"\n                    align={c.align}\n                  ></TableCell>\n                ))}\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </Box>\n      </Grid>\n    </Grommet>\n  );\n}\n*/\n\n/*\n{data.tasks.map((task) => (\n        <li key={task.id}>\n          <p>{task.id}</p>\n          <p>{task.task}</p>\n          <p>{task.limit}</p>\n        </li>\n      ))}\n*/\n\n/*\nconst TodoList = () => {\n  const result = useQuery(TASK);\n  console.log(result);\n\n  if (result.loading) {\n    return <div>loading...</div>;\n  }\n\n  return <div>{result.data.tasks.map((p) => p.task).join(\", \")},</div>;\n};\n*/\n\n/*\nfunction TodoList() {\n  const { loading, error, data } = useQuery(TASK);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <List primaryKey=\"task\" secondaryKey=\"limit\" data={data.tasks} />\n      {data.tasks.map((task) => (\n        <li key={task.id}>\n          ã€€<p>{task.id}</p>\n          <p>{task.task}</p>\n          <p>{task.limit}</p>\n          <button onClick={() => deletetask(task.id)}>Delete</button>\n        </li>\n      ))}\n    </Grommet>\n  );\n}\n*/\n\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Todolist.js"],"names":["React","Grommet","Box","Heading","Grid","Table","TableBody","TableCell","TableFooter","TableHeader","TableRow","Text","CheckBox","List","Button","useQuery","useMutation","TASK","DELETE_TASK","COLUMNS","property","label","format","task","TodoList","loading","error","data","deleteTask","refetchQueries","query","deletetask","id","variables","vertical","horizontal","map","c","align","tasks"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Grommet,\n  Box,\n  Heading,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHeader,\n  TableRow,\n  Text,\n  CheckBox,\n  List,\n  Button,\n} from \"grommet\";\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { TASK, DELETE_TASK } from \"./Query\";\n\nconst COLUMNS = [\n  {\n    property: \"task\",\n    label: \"TASK\",\n    format: (task) => <strong>{task.task}</strong>,\n  },\n  {\n    property: \"limit\",\n    label: \"LIMIT\",\n  },\n];\n\nfunction TodoList() {\n  const { loading, error, data } = useQuery(TASK);\n\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  const deletetask = (id) => {\n    deleteTask({ variables: { id } });\n  };\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <Grid fill rows={[\"auto\", \"flex\", \"auto\"]}>\n        <Box align=\"center\" tag=\"header\" pad=\"medium\" color=\"#00739D\">\n          <Heading margin=\"none\" color=\"#00739D\" size=\"small\">\n            My TodoList\n          </Heading>\n        </Box>\n        <Box\n          overflow={{ vertical: \"scroll\", horizontal: \"auto\" }}\n          height=\"medium\"\n          width=\"medium\"\n        >\n          <Table sortable=\"true\">\n            <TableHeader>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    scope=\"col\"\n                    border=\"bottom\"\n                    align={c.align}\n                  >\n                    <Text>{c.label}</Text>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.tasks.map((task) => (\n                <TableRow key={task.id}>\n                  {COLUMNS.map((c) => (\n                    <TableCell\n                      scope=\"col\"\n                      border=\"bottom\"\n                      key={c.property}\n                      align={c.align}\n                    >\n                      <Text>\n                        {c.format ? c.format(task) : task[c.property]}\n                      </Text>\n                    </TableCell>\n                  ))}\n                  <TableCell>\n                    <Button alignSelf=\"center\">\n                      <CheckBox />\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </Grid>\n    </Grommet>\n  );\n}\n\n/*\n  return (\n    <Grommet>\n      <Grid fill rows={[\"auto\", \"flex\", \"auto\"]}>\n        <Box align=\"center\" tag=\"header\" pad=\"medium\" color=\"#00739D\">\n          <Heading margin=\"none\" color=\"#00739D\" size=\"small\">\n            My TodoList\n          </Heading>\n        </Box>\n        <Box\n          overflow={{ vertical: \"scroll\", horizontal: \"auto\" }}\n          height=\"medium\"\n          width=\"medium\"\n        >\n          <Table sortable=\"true\">\n            <TableHeader>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    scope=\"col\"\n                    border=\"bottom\"\n                    align={c.align}\n                  >\n                    <Text>{c.label}</Text>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.tasks.map((task) => (\n                <TableRow key={task.id}>\n                  {COLUMNS.map((c) => (\n                    <TableCell\n                      scope=\"col\"\n                      border=\"bottom\"\n                      key={c.property}\n                      scope={c.dataScope}\n                      align={c.align}\n                    >\n                      <Text>\n                        {c.format ? c.format(task) : task[c.property]}\n                      </Text>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    border=\"top\"\n                    align={c.align}\n                  ></TableCell>\n                ))}\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </Box>\n      </Grid>\n    </Grommet>\n  );\n}\n*/\n\n/*\n{data.tasks.map((task) => (\n        <li key={task.id}>\n          <p>{task.id}</p>\n          <p>{task.task}</p>\n          <p>{task.limit}</p>\n        </li>\n      ))}\n*/\n/*\nconst TodoList = () => {\n  const result = useQuery(TASK);\n  console.log(result);\n\n  if (result.loading) {\n    return <div>loading...</div>;\n  }\n\n  return <div>{result.data.tasks.map((p) => p.task).join(\", \")},</div>;\n};\n*/\n\n/*\nfunction TodoList() {\n  const { loading, error, data } = useQuery(TASK);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <List primaryKey=\"task\" secondaryKey=\"limit\" data={data.tasks} />\n      {data.tasks.map((task) => (\n        <li key={task.id}>\n          ã€€<p>{task.id}</p>\n          <p>{task.task}</p>\n          <p>{task.limit}</p>\n          <button onClick={() => deletetask(task.id)}>Delete</button>\n        </li>\n      ))}\n    </Grommet>\n  );\n}\n*/\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}