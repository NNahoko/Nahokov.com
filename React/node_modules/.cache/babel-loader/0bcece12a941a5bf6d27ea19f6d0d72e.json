{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Test_2.js\";\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { CREATE_BOOKINFO, BOOKINFO } from './Query';\nimport { Box, Button, Grommet, Form, FormField, Text, TextInput } from \"grommet\";\nimport { grommet } from \"grommet/themes\"; // This example shows a way to perform validation across multiple fields.\n\nconst Example = () => {\n  const [value, setValue] = useState({\n    title: '',\n    author: ''\n  });\n  const [createBookinfo] = useMutation(CREATE_BOOKINFO, {\n    refetchQueries: [{\n      query: BOOKINFO\n    }]\n  });\n\n  const submit = event => {\n    event.preventDefault();\n    createBookinfo({\n      variables: {\n        title,\n        author\n      }\n    });\n    setValuez({\n      title: '',\n      author: ''\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Grommet, {\n    full: true,\n    theme: grommet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    fill: true,\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    width: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    value: value,\n    onChange: nextValue => setValue(nextValue),\n    onSubmit: ({\n      value: nextValue\n    }) => submit(nextValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormField, {\n    label: \"Name\",\n    name: \"name\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    name: \"name\",\n    type: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(FormField, {\n    label: \"Email\",\n    name: \"email\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    name: \"email\",\n    type: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Box, {\n    direction: \"row\",\n    justify: \"between\",\n    margin: {\n      top: \"medium\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"reset\",\n    label: \"Reset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    label: \"Add\",\n    primary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default Example;","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Test_2.js"],"names":["React","useState","useMutation","CREATE_BOOKINFO","BOOKINFO","Box","Button","Grommet","Form","FormField","Text","TextInput","grommet","Example","value","setValue","title","author","createBookinfo","refetchQueries","query","submit","event","preventDefault","variables","setValuez","nextValue","top"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { CREATE_BOOKINFO, BOOKINFO } from './Query'\n\nimport {\n  Box,\n  Button,\n  Grommet,\n  Form,\n  FormField,\n  Text,\n  TextInput\n} from \"grommet\";\nimport { grommet } from \"grommet/themes\";\n\n// This example shows a way to perform validation across multiple fields.\nconst Example = () => {\n  const [value, setValue] = useState({ title:  '', author: '' });\n\n  \n  const [ createBookinfo ] = useMutation(CREATE_BOOKINFO, {\n      refetchQueries: [ { query: BOOKINFO } ]\n  })\n\n\n  const submit =  (event) => {\n    event.preventDefault()\n\n    createBookinfo({  variables: { title, author } })\n\n    setValuez({title:'',author:''})\n    }\n\n\n  return (\n    <Grommet full theme={grommet}>\n      <Box fill align=\"center\" justify=\"center\">\n        <Box width=\"medium\">\n          <Form\n            value={value}\n            onChange={nextValue => setValue(nextValue)}\n            onSubmit={({ value: nextValue }) => submit(nextValue)}\n          >\n            <FormField label=\"Name\" name=\"name\" required>\n              <TextInput name=\"name\" type=\"name\" />\n            </FormField>\n\n            <FormField label=\"Email\" name=\"email\" required>\n              <TextInput name=\"email\" type=\"email\" />\n            </FormField>\n\n            <Box direction=\"row\" justify=\"between\" margin={{ top: \"medium\" }}>\n              <Button type=\"reset\" label=\"Reset\" />\n              <Button type=\"submit\" label=\"Add\" primary />\n            </Box>\n          </Form>\n        </Box>\n      </Box>\n    </Grommet>\n  );\n};\n\nexport default Example;"]},"metadata":{},"sourceType":"module"}