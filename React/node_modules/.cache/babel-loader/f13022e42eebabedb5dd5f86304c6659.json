{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Todolist.js\";\nimport React from \"react\";\nimport { Grommet, Box, Heading, Grid, Table, TableBody, TableCell, TableFooter, TableHeader, TableRow, Text, CheckBox, List, Button, FormField, Form, RadioButtonGroup } from \"grommet\";\nimport FormLayer from \"./CreateTodo\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { TASK, DELETE_TASK } from \"./Query\";\nconst COLUMNS = [{\n  property: \"task\",\n  label: \"TASK\",\n  format: task => /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 23\n    }\n  }, task.task)\n}, {\n  property: \"limit\",\n  label: \"LIMIT\"\n}];\n\nfunction TodoList() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TASK);\n  const [checked, setChecked] = React.useState(true);\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{\n      query: TASK\n    }]\n  });\n\n  const deletetask = id => {\n    deleteTask({\n      variables: {\n        id\n      }\n    });\n  };\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    fill: true,\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    overflow: {\n      vertical: \"scroll\",\n      horizontal: \"auto\"\n    },\n    height: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    sortable: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, COLUMNS.map(c => /*#__PURE__*/React.createElement(TableCell, {\n    key: c.property,\n    scope: \"col\",\n    border: \"bottom\",\n    align: c.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, c.label))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, data.bookinfos.map(book => /*#__PURE__*/React.createElement(TableRow, {\n    key: book.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, COLUMNS.map(c => /*#__PURE__*/React.createElement(TableCell, {\n    scope: \"col\",\n    border: \"bottom\",\n    key: c.property,\n    align: c.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 23\n    }\n  }, c.format ? c.format(book) : book[c.property]))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    plain: false,\n    icon: /*#__PURE__*/React.createElement(Close, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    }),\n    margin: \"small\",\n    onClick: () => deleteInfo(book.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(BookInfos.Provider, {\n    value: book,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(EditForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 23\n    }\n  }))))))))));\n}\n/*\n  return (\n    <Grommet>\n      <Grid fill rows={[\"auto\", \"flex\", \"auto\"]}>\n        <Box align=\"center\" tag=\"header\" pad=\"medium\" color=\"#00739D\">\n          <Heading margin=\"none\" color=\"#00739D\" size=\"small\">\n            My TodoList\n          </Heading>\n        </Box>\n        <Box\n          overflow={{ vertical: \"scroll\", horizontal: \"auto\" }}\n          height=\"medium\"\n          width=\"medium\"\n        >\n          <Table sortable=\"true\">\n            <TableHeader>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    scope=\"col\"\n                    border=\"bottom\"\n                    align={c.align}\n                  >\n                    <Text>{c.label}</Text>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.tasks.map((task) => (\n                <TableRow key={task.id}>\n                  {COLUMNS.map((c) => (\n                    <TableCell\n                      scope=\"col\"\n                      border=\"bottom\"\n                      key={c.property}\n                      scope={c.dataScope}\n                      align={c.align}\n                    >\n                      <Text>\n                        {c.format ? c.format(task) : task[c.property]}\n                      </Text>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    border=\"top\"\n                    align={c.align}\n                  ></TableCell>\n                ))}\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </Box>\n      </Grid>\n    </Grommet>\n  );\n}\n*/\n\n/*\n{data.tasks.map((task) => (\n        <li key={task.id}>\n          <p>{task.id}</p>\n          <p>{task.task}</p>\n          <p>{task.limit}</p>\n        </li>\n      ))}\n*/\n\n/*\nconst TodoList = () => {\n  const result = useQuery(TASK);\n  console.log(result);\n\n  if (result.loading) {\n    return <div>loading...</div>;\n  }\n\n  return <div>{result.data.tasks.map((p) => p.task).join(\", \")},</div>;\n};\n*/\n\n/*\nfunction TodoList() {\n  const { loading, error, data } = useQuery(TASK);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <List primaryKey=\"task\" secondaryKey=\"limit\" data={data.tasks} />\n      {data.tasks.map((task) => (\n        <li key={task.id}>\n          ã€€<p>{task.id}</p>\n          <p>{task.task}</p>\n          <p>{task.limit}</p>\n          <button onClick={() => deletetask(task.id)}>Delete</button>\n        </li>\n      ))}\n    </Grommet>\n  );\n}\n*/\n\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Todolist.js"],"names":["React","Grommet","Box","Heading","Grid","Table","TableBody","TableCell","TableFooter","TableHeader","TableRow","Text","CheckBox","List","Button","FormField","Form","RadioButtonGroup","FormLayer","useQuery","useMutation","TASK","DELETE_TASK","COLUMNS","property","label","format","task","TodoList","loading","error","data","checked","setChecked","useState","deleteTask","refetchQueries","query","deletetask","id","variables","vertical","horizontal","map","c","align","bookinfos","book","deleteInfo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Grommet,\n  Box,\n  Heading,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHeader,\n  TableRow,\n  Text,\n  CheckBox,\n  List,\n  Button,\n  FormField,\n  Form,\n  RadioButtonGroup,\n} from \"grommet\";\n\nimport FormLayer from \"./CreateTodo\";\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { TASK, DELETE_TASK } from \"./Query\";\n\nconst COLUMNS = [\n  {\n    property: \"task\",\n    label: \"TASK\",\n    format: (task) => <strong>{task.task}</strong>,\n  },\n  {\n    property: \"limit\",\n    label: \"LIMIT\",\n  },\n];\n\nfunction TodoList() {\n  const { loading, error, data } = useQuery(TASK);\n  const [checked, setChecked] = React.useState(true);\n\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  const deletetask = (id) => {\n    deleteTask({ variables: { id } });\n  };\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <Box fill align=\"center\" justify=\"center\">\n        <Box\n          overflow={{ vertical: \"scroll\", horizontal: \"auto\" }}\n          height=\"medium\"\n        >\n          <Table sortable=\"true\">\n            <TableHeader>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    scope=\"col\"\n                    border=\"bottom\"\n                    align={c.align}\n                  >\n                    <Text>{c.label}</Text>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.bookinfos.map((book) => (\n                <TableRow key={book.id}>\n                  {COLUMNS.map((c) => (\n                    <TableCell\n                      scope=\"col\"\n                      border=\"bottom\"\n                      key={c.property}\n                      align={c.align}\n                    >\n                      <Text>\n                        {c.format ? c.format(book) : book[c.property]}\n                      </Text>\n                    </TableCell>\n                  ))}\n                  <TableCell>\n                    <Button\n                      plain={false}\n                      icon={<Close size=\"small\" />}\n                      margin=\"small\"\n                      onClick={() => deleteInfo(book.id)}\n                    />\n                    <BookInfos.Provider value={book}>\n                      <EditForm />\n                    </BookInfos.Provider>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </Box>\n    </Grommet>\n  );\n}\n\n/*\n  return (\n    <Grommet>\n      <Grid fill rows={[\"auto\", \"flex\", \"auto\"]}>\n        <Box align=\"center\" tag=\"header\" pad=\"medium\" color=\"#00739D\">\n          <Heading margin=\"none\" color=\"#00739D\" size=\"small\">\n            My TodoList\n          </Heading>\n        </Box>\n        <Box\n          overflow={{ vertical: \"scroll\", horizontal: \"auto\" }}\n          height=\"medium\"\n          width=\"medium\"\n        >\n          <Table sortable=\"true\">\n            <TableHeader>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    scope=\"col\"\n                    border=\"bottom\"\n                    align={c.align}\n                  >\n                    <Text>{c.label}</Text>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.tasks.map((task) => (\n                <TableRow key={task.id}>\n                  {COLUMNS.map((c) => (\n                    <TableCell\n                      scope=\"col\"\n                      border=\"bottom\"\n                      key={c.property}\n                      scope={c.dataScope}\n                      align={c.align}\n                    >\n                      <Text>\n                        {c.format ? c.format(task) : task[c.property]}\n                      </Text>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    border=\"top\"\n                    align={c.align}\n                  ></TableCell>\n                ))}\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </Box>\n      </Grid>\n    </Grommet>\n  );\n}\n*/\n\n/*\n{data.tasks.map((task) => (\n        <li key={task.id}>\n          <p>{task.id}</p>\n          <p>{task.task}</p>\n          <p>{task.limit}</p>\n        </li>\n      ))}\n*/\n/*\nconst TodoList = () => {\n  const result = useQuery(TASK);\n  console.log(result);\n\n  if (result.loading) {\n    return <div>loading...</div>;\n  }\n\n  return <div>{result.data.tasks.map((p) => p.task).join(\", \")},</div>;\n};\n*/\n\n/*\nfunction TodoList() {\n  const { loading, error, data } = useQuery(TASK);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <List primaryKey=\"task\" secondaryKey=\"limit\" data={data.tasks} />\n      {data.tasks.map((task) => (\n        <li key={task.id}>\n          ã€€<p>{task.id}</p>\n          <p>{task.task}</p>\n          <p>{task.limit}</p>\n          <button onClick={() => deletetask(task.id)}>Delete</button>\n        </li>\n      ))}\n    </Grommet>\n  );\n}\n*/\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}