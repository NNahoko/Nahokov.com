{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Todolist_2.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { TASK, DELETE_TASK } from \"./Query\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { Trash } from \"grommet-icons\";\nimport { Table, TableBody, TableCell, TableHeader, TableRow, Text, Grommet, Button, Box, CheckBox } from \"grommet\";\nconst COLUMNS = [{\n  property: \"task\",\n  label: \"Task\",\n  format: task => /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 23\n    }\n  }, task.task)\n}, {\n  property: \"limit\",\n  label: \"Limit\"\n}];\n\nfunction TodoList2() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TASK);\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{\n      query: TASK\n    }]\n  });\n\n  const deleteTasks = id => {\n    deleteTask({\n      variables: {\n        id\n      }\n    });\n  };\n\n  const [checkedTasks, setCheckedTasks] = useState({}); //ひとつでもcheckedになっている場合にのみ送信ボタンを表示させたいので、全体のStateを監視する\n\n  const [isBtnHide, setIsBtnHide] = useState(true); //const { loading, error, data } = useQuery(TASK);\n\n  useEffect(() => {\n    console.log(checkedTasks);\n    Object.keys(checkedTasks).length && setIsBtnHide(false); //すべてのcheckedItemの値がfalseの場合に送信ボタンを表示させる\n    //  setTimeout(() => {\n\n    if (Object.values(checkedTasks).every(checkedtask => {\n      return checkedtask === false;\n    })) {\n      setIsBtnHide(true);\n    } //}, 100);\n\n  }, [checkedTasks]);\n\n  const handleChange = e => {\n    //let Id = e.target.id;\n\n    /*\n    setCheckedTasks({\n      ...checkedTasks,\n      [e.target.id]: e.target.checked,\n    });\n    */\n    let newTasks;\n    newTasks = { ...checkedTasks,\n      [e.target.id]: e.target.checked\n    }; // console.log(newTasks);\n\n    setCheckedTasks(newTasks); //console.log(checkedTasks);\n    //console.log(\"checkedTasks:\", checkedTasks);\n\n    /*\n    const Tasks = Object.entries(checkedTasks);\n    console.log(checkedTasks);\n    const id = e.target.id;\n    const newList = Tasks.filter((v) => v.id !== id);\n    console.log(newList);\n    */\n  };\n\n  const deletetask = () => {\n    const dataPushArray = Object.entries(checkedTasks); //dataPushArray.map((item) => {\n    //  deleteTasks(item[0]);\n    //});\n\n    dataPushArray.forEach(item => {\n      deleteTasks(item[0]);\n    }); //console.log(checkedTasks);\n\n    setCheckedTasks({});\n  };\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    fill: true,\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    overflow: {\n      vertical: \"scroll\",\n      horizontal: \"auto\"\n    },\n    height: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    sortable: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, COLUMNS.map(c => /*#__PURE__*/React.createElement(TableCell, {\n    key: c.property,\n    scope: \"col\",\n    border: \"bottom\",\n    align: c.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }, c.label))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, data.tasks.map(task => /*#__PURE__*/React.createElement(TableRow, {\n    key: task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, COLUMNS.map(c => /*#__PURE__*/React.createElement(TableCell, {\n    margin: \"small\",\n    scope: \"col\",\n    border: \"bottom\",\n    key: c.property,\n    align: c.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 23\n    }\n  }, c.format ? c.format(task) : task[c.property]))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CheckBox, {\n    id: task.id,\n    value: task,\n    checked: checkedTasks[task.id],\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }))))))), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, !isBtnHide && /*#__PURE__*/React.createElement(Button, {\n    plain: false,\n    icon: /*#__PURE__*/React.createElement(Trash, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }\n    }),\n    label: \"Delete\",\n    margin: \"small\",\n    onClick: deletetask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default TodoList2;","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Todolist_2.js"],"names":["React","useState","useEffect","TASK","DELETE_TASK","useQuery","useMutation","Trash","Table","TableBody","TableCell","TableHeader","TableRow","Text","Grommet","Button","Box","CheckBox","COLUMNS","property","label","format","task","TodoList2","loading","error","data","deleteTask","refetchQueries","query","deleteTasks","id","variables","checkedTasks","setCheckedTasks","isBtnHide","setIsBtnHide","console","log","Object","keys","length","values","every","checkedtask","handleChange","e","newTasks","target","checked","deletetask","dataPushArray","entries","forEach","item","vertical","horizontal","map","c","align","tasks"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { TASK, DELETE_TASK } from \"./Query\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { Trash } from \"grommet-icons\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Text,\n  Grommet,\n  Button,\n  Box,\n  CheckBox,\n} from \"grommet\";\n\nconst COLUMNS = [\n  {\n    property: \"task\",\n    label: \"Task\",\n    format: (task) => <strong>{task.task}</strong>,\n  },\n  {\n    property: \"limit\",\n    label: \"Limit\",\n  },\n];\n\nfunction TodoList2() {\n  const { loading, error, data } = useQuery(TASK);\n\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  const deleteTasks = (id) => {\n    deleteTask({ variables: { id } });\n  };\n\n  const [checkedTasks, setCheckedTasks] = useState({});\n  //ひとつでもcheckedになっている場合にのみ送信ボタンを表示させたいので、全体のStateを監視する\n  const [isBtnHide, setIsBtnHide] = useState(true);\n\n  //const { loading, error, data } = useQuery(TASK);\n\n  useEffect(() => {\n    console.log(checkedTasks);\n    Object.keys(checkedTasks).length && setIsBtnHide(false);\n    //すべてのcheckedItemの値がfalseの場合に送信ボタンを表示させる\n\n    //  setTimeout(() => {\n    if (\n      Object.values(checkedTasks).every((checkedtask) => {\n        return checkedtask === false;\n      })\n    ) {\n      setIsBtnHide(true);\n    }\n    //}, 100);\n  }, [checkedTasks]);\n\n  const handleChange = (e) => {\n    //let Id = e.target.id;\n\n    /*\n    setCheckedTasks({\n      ...checkedTasks,\n      [e.target.id]: e.target.checked,\n    });\n    */\n    let newTasks;\n    newTasks = {\n      ...checkedTasks,\n      [e.target.id]: e.target.checked,\n    };\n    // console.log(newTasks);\n    setCheckedTasks(newTasks);\n    //console.log(checkedTasks);\n\n    //console.log(\"checkedTasks:\", checkedTasks);\n\n    /*\n    const Tasks = Object.entries(checkedTasks);\n    console.log(checkedTasks);\n    const id = e.target.id;\n    const newList = Tasks.filter((v) => v.id !== id);\n    console.log(newList);\n    */\n  };\n\n  const deletetask = () => {\n    const dataPushArray = Object.entries(checkedTasks);\n\n    //dataPushArray.map((item) => {\n    //  deleteTasks(item[0]);\n    //});\n    dataPushArray.forEach((item) => {\n      deleteTasks(item[0]);\n    });\n    //console.log(checkedTasks);\n    setCheckedTasks({});\n  };\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <Box fill align=\"center\" justify=\"center\">\n        <Box\n          overflow={{ vertical: \"scroll\", horizontal: \"auto\" }}\n          height=\"medium\"\n        >\n          <Table sortable=\"true\">\n            <TableHeader>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    scope=\"col\"\n                    border=\"bottom\"\n                    align={c.align}\n                  >\n                    <Text>{c.label}</Text>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.tasks.map((task) => (\n                <TableRow key={task.id}>\n                  {COLUMNS.map((c) => (\n                    <TableCell\n                      margin=\"small\"\n                      scope=\"col\"\n                      border=\"bottom\"\n                      key={c.property}\n                      align={c.align}\n                    >\n                      <Text>\n                        {c.format ? c.format(task) : task[c.property]}\n                      </Text>\n                    </TableCell>\n                  ))}\n                  <TableCell>\n                    <CheckBox\n                      id={task.id}\n                      value={task}\n                      checked={checkedTasks[task.id]}\n                      onChange={handleChange}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n        <Box>\n          {!isBtnHide && (\n            <Button\n              plain={false}\n              icon={<Trash size=\"small\" />}\n              label=\"Delete\"\n              margin=\"small\"\n              onClick={deletetask}\n            />\n          )}\n        </Box>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default TodoList2;\n"]},"metadata":{},"sourceType":"module"}