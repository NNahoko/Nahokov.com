{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Todolist.js\";\nimport React from \"react\";\nimport { Grommet, Box, Heading, Grid, Table, TableBody, TableCell, TableFooter, TableHeader, TableRow, Text, CheckBox, List } from \"grommet\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { TASK, DELETE_TASK } from \"./Query\";\nconst COLUMNS = [{\n  property: \"task\",\n  label: \"TASK\",\n  format: task => /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 23\n    }\n  }, task.task)\n}, {\n  property: \"limit\",\n  label: \"LIMIT\"\n}];\n\nfunction TodoList() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TASK);\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{\n      query: TASK\n    }]\n  });\n\n  const deletetask = id => {\n    deleteTask({\n      variables: {\n        id\n      }\n    });\n  };\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    primaryKey: \"name\",\n    secondaryKey: \"percent\",\n    data: data.tasks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), data.tasks.map(task => /*#__PURE__*/React.createElement(\"li\", {\n    key: task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"\\u3000\", /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }\n  }, task.id), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, task.task), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, task.limit), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => deletetask(task.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, \"Delete\"))));\n}\n/*\n  return (\n    <Grommet>\n      <Grid fill rows={[\"auto\", \"flex\", \"auto\"]}>\n        <Box align=\"center\" tag=\"header\" pad=\"medium\" color=\"#00739D\">\n          <Heading margin=\"none\" color=\"#00739D\" size=\"small\">\n            My TodoList\n          </Heading>\n        </Box>\n        <Box\n          overflow={{ vertical: \"scroll\", horizontal: \"auto\" }}\n          height=\"medium\"\n          width=\"medium\"\n        >\n          <Table sortable=\"true\">\n            <TableHeader>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    scope=\"col\"\n                    border=\"bottom\"\n                    align={c.align}\n                  >\n                    <Text>{c.label}</Text>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.tasks.map((task) => (\n                <TableRow key={task.id}>\n                  {COLUMNS.map((c) => (\n                    <TableCell\n                      scope=\"col\"\n                      border=\"bottom\"\n                      key={c.property}\n                      scope={c.dataScope}\n                      align={c.align}\n                    >\n                      <Text>\n                        {c.format ? c.format(task) : task[c.property]}\n                      </Text>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    border=\"top\"\n                    align={c.align}\n                  ></TableCell>\n                ))}\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </Box>\n      </Grid>\n    </Grommet>\n  );\n}\n*/\n\n/*\n{data.tasks.map((task) => (\n        <li key={task.id}>\n          <p>{task.id}</p>\n          <p>{task.task}</p>\n          <p>{task.limit}</p>\n        </li>\n      ))}\n*/\n\n/*\nconst TodoList = () => {\n  const result = useQuery(TASK);\n  console.log(result);\n\n  if (result.loading) {\n    return <div>loading...</div>;\n  }\n\n  return <div>{result.data.tasks.map((p) => p.task).join(\", \")},</div>;\n};\n*/\n\n/*\nfunction TodoList() {\n  const { loading, error, data } = useQuery(TASK);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <Box align=\"center\" pad=\"large\">\n        <List data={data} />\n      </Box>\n    </Grommet>\n  );\n}\n*/\n\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Todolist.js"],"names":["React","Grommet","Box","Heading","Grid","Table","TableBody","TableCell","TableFooter","TableHeader","TableRow","Text","CheckBox","List","useQuery","useMutation","TASK","DELETE_TASK","COLUMNS","property","label","format","task","TodoList","loading","error","data","deleteTask","refetchQueries","query","deletetask","id","variables","tasks","map","limit"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,OADF,EAEEC,GAFF,EAGEC,OAHF,EAIEC,IAJF,EAKEC,KALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,WARF,EASEC,WATF,EAUEC,QAVF,EAWEC,IAXF,EAYEC,QAZF,EAaEC,IAbF,QAcO,SAdP;AAgBA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,gBAAtC;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,SAAlC;AAEA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,QAAQ,EAAE,MADZ;AAEEC,EAAAA,KAAK,EAAE,MAFT;AAGEC,EAAAA,MAAM,EAAGC,IAAD,iBAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAASA,IAAI,CAACA,IAAd;AAHpB,CADc,EAMd;AACEH,EAAAA,QAAQ,EAAE,OADZ;AAEEC,EAAAA,KAAK,EAAE;AAFT,CANc,CAAhB;;AAYA,SAASG,QAAT,GAAoB;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BZ,QAAQ,CAACE,IAAD,CAAzC;AAEA,QAAM,CAACW,UAAD,IAAeZ,WAAW,CAACE,WAAD,EAAc;AAC5CW,IAAAA,cAAc,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAEb;AAAT,KAAD;AAD4B,GAAd,CAAhC;;AAIA,QAAMc,UAAU,GAAIC,EAAD,IAAQ;AACzBJ,IAAAA,UAAU,CAAC;AAAEK,MAAAA,SAAS,EAAE;AAAED,QAAAA;AAAF;AAAb,KAAD,CAAV;AACD,GAFD;;AAIA,MAAIP,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,sBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,UAAU,EAAC,MAAjB;AAAwB,IAAA,YAAY,EAAC,SAArC;AAA+C,IAAA,IAAI,EAAEC,IAAI,CAACO,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGP,IAAI,CAACO,KAAL,CAAWC,GAAX,CAAgBZ,IAAD,iBACd;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACS,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIT,IAAI,CAACS,EAAT,CADH,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIT,IAAI,CAACA,IAAT,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,IAAI,CAACa,KAAT,CAHF,eAIE;AAAQ,IAAA,OAAO,EAAE,MAAML,UAAU,CAACR,IAAI,CAACS,EAAN,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,CADD,CAFH,CADF;AAaD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;;;;;;;;;;AASA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;AAeA,eAAeR,QAAf","sourcesContent":["import React from \"react\";\nimport {\n  Grommet,\n  Box,\n  Heading,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableFooter,\n  TableHeader,\n  TableRow,\n  Text,\n  CheckBox,\n  List,\n} from \"grommet\";\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { TASK, DELETE_TASK } from \"./Query\";\n\nconst COLUMNS = [\n  {\n    property: \"task\",\n    label: \"TASK\",\n    format: (task) => <strong>{task.task}</strong>,\n  },\n  {\n    property: \"limit\",\n    label: \"LIMIT\",\n  },\n];\n\nfunction TodoList() {\n  const { loading, error, data } = useQuery(TASK);\n\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  const deletetask = (id) => {\n    deleteTask({ variables: { id } });\n  };\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <List primaryKey=\"name\" secondaryKey=\"percent\" data={data.tasks} />\n      {data.tasks.map((task) => (\n        <li key={task.id}>\n          ã€€<p>{task.id}</p>\n          <p>{task.task}</p>\n          <p>{task.limit}</p>\n          <button onClick={() => deletetask(task.id)}>Delete</button>\n        </li>\n      ))}\n    </Grommet>\n  );\n}\n\n/*\n  return (\n    <Grommet>\n      <Grid fill rows={[\"auto\", \"flex\", \"auto\"]}>\n        <Box align=\"center\" tag=\"header\" pad=\"medium\" color=\"#00739D\">\n          <Heading margin=\"none\" color=\"#00739D\" size=\"small\">\n            My TodoList\n          </Heading>\n        </Box>\n        <Box\n          overflow={{ vertical: \"scroll\", horizontal: \"auto\" }}\n          height=\"medium\"\n          width=\"medium\"\n        >\n          <Table sortable=\"true\">\n            <TableHeader>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    scope=\"col\"\n                    border=\"bottom\"\n                    align={c.align}\n                  >\n                    <Text>{c.label}</Text>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.tasks.map((task) => (\n                <TableRow key={task.id}>\n                  {COLUMNS.map((c) => (\n                    <TableCell\n                      scope=\"col\"\n                      border=\"bottom\"\n                      key={c.property}\n                      scope={c.dataScope}\n                      align={c.align}\n                    >\n                      <Text>\n                        {c.format ? c.format(task) : task[c.property]}\n                      </Text>\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    border=\"top\"\n                    align={c.align}\n                  ></TableCell>\n                ))}\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </Box>\n      </Grid>\n    </Grommet>\n  );\n}\n*/\n\n/*\n{data.tasks.map((task) => (\n        <li key={task.id}>\n          <p>{task.id}</p>\n          <p>{task.task}</p>\n          <p>{task.limit}</p>\n        </li>\n      ))}\n*/\n/*\nconst TodoList = () => {\n  const result = useQuery(TASK);\n  console.log(result);\n\n  if (result.loading) {\n    return <div>loading...</div>;\n  }\n\n  return <div>{result.data.tasks.map((p) => p.task).join(\", \")},</div>;\n};\n*/\n\n/*\nfunction TodoList() {\n  const { loading, error, data } = useQuery(TASK);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <Box align=\"center\" pad=\"large\">\n        <List data={data} />\n      </Box>\n    </Grommet>\n  );\n}\n*/\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}