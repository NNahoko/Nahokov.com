{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Home.js\";\nimport React from \"react\";\nimport { Grommet, Main, Text, Image, Box } from \"grommet\";\nimport image from \"./image/IMG_9079.jpg\";\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\nconst TASK = gql`\n  {\n    tasks {\n      id\n      task\n      limit\n      completed\n    }\n  }\n`;\nconst PART_TASK = gql`\n  {\n    task(id: $id) {\n      id\n      completed\n    }\n  }\n`;\nconst EDIT_TASK_COMPLETED = gql`\n  mutation UpdateTaskCompleted($id: ID!, $completed: Boolean) {\n    updateTaskCompleted(input: { id: $id, completed: $completed }) {\n      task {\n        id\n        completed\n      }\n    }\n  }\n`;\n\nfunction Home() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TASK);\n  const [pastTask] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{\n      query: BOOKINFO\n    }]\n  });\n\n  const statechange = id => {\n    pastTask({\n      variables: {\n        id: 14,\n        completed: false\n      }\n    });\n  };\n  /*\n  const { loading, error, data } = useQuery(PART_TASK, {\n    variables: { id: 14 },\n  });\n   */\n\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  console.log(data);\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"Wellcome!!!\")), /*#__PURE__*/React.createElement(Box, {\n    height: \"medium\",\n    width: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    fit: \"cover\",\n    src: image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Home;\n/*\n const { data } = useQuery(TASK);\n\n  const [updateTaskCompleted] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  updateTaskCompleted({ variables: { id: 14, completed: false } });\n*/","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Home.js"],"names":["React","Grommet","Main","Text","Image","Box","image","gql","useQuery","useMutation","TASK","PART_TASK","EDIT_TASK_COMPLETED","Home","loading","error","data","pastTask","refetchQueries","query","BOOKINFO","statechange","id","variables","completed","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCC,GAArC,QAAgD,SAAhD;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AAEA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,WAAxB,QAA2C,gBAA3C;AAEA,MAAMC,IAAI,GAAGH,GAAI;;;;;;;;;CAAjB;AAWA,MAAMI,SAAS,GAAGJ,GAAI;;;;;;;CAAtB;AASA,MAAMK,mBAAmB,GAAGL,GAAI;;;;;;;;;CAAhC;;AAWA,SAASM,IAAT,GAAgB;AACd,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BR,QAAQ,CAACE,IAAD,CAAzC;AAEA,QAAM,CAACO,QAAD,IAAaR,WAAW,CAACG,mBAAD,EAAsB;AAClDM,IAAAA,cAAc,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAEC;AAAT,KAAD;AADkC,GAAtB,CAA9B;;AAIA,QAAMC,WAAW,GAAIC,EAAD,IAAQ;AAC1BL,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,SAAS,EAAE;AAAED,QAAAA,EAAE,EAAE,EAAN;AAAUE,QAAAA,SAAS,EAAE;AAArB;AAAb,KAAD,CAAR;AACD,GAFD;AAIA;;;;;;;AAOA,MAAIV,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACXU,EAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AAEA,sBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,eAIE,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAC,OAAX;AAAmB,IAAA,GAAG,EAAEV,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,CADF;AAUD;;AAED,eAAeO,IAAf;AAEA","sourcesContent":["import React from \"react\";\nimport { Grommet, Main, Text, Image, Box } from \"grommet\";\nimport image from \"./image/IMG_9079.jpg\";\n\nimport { gql, useQuery, useMutation } from \"@apollo/client\";\n\nconst TASK = gql`\n  {\n    tasks {\n      id\n      task\n      limit\n      completed\n    }\n  }\n`;\n\nconst PART_TASK = gql`\n  {\n    task(id: $id) {\n      id\n      completed\n    }\n  }\n`;\n\nconst EDIT_TASK_COMPLETED = gql`\n  mutation UpdateTaskCompleted($id: ID!, $completed: Boolean) {\n    updateTaskCompleted(input: { id: $id, completed: $completed }) {\n      task {\n        id\n        completed\n      }\n    }\n  }\n`;\n\nfunction Home() {\n  const { loading, error, data } = useQuery(TASK);\n\n  const [pastTask] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{ query: BOOKINFO }],\n  });\n\n  const statechange = (id) => {\n    pastTask({ variables: { id: 14, completed: false } });\n  };\n\n  /*\n  const { loading, error, data } = useQuery(PART_TASK, {\n    variables: { id: 14 },\n  });\n\n  */\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  console.log(data);\n\n  return (\n    <Grommet>\n      <Main>\n        <Text>Wellcome!!!</Text>\n      </Main>\n      <Box height=\"medium\" width=\"large\">\n        <Image fit=\"cover\" src={image} />\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default Home;\n\n/*\n const { data } = useQuery(TASK);\n\n  const [updateTaskCompleted] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  updateTaskCompleted({ variables: { id: 14, completed: false } });\n*/\n"]},"metadata":{},"sourceType":"module"}