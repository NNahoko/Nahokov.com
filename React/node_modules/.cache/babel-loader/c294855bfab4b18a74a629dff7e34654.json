{"ast":null,"code":"var _jsxFileName = \"/Users/n/my-app/src/Components/Todolist.js\";\nimport React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\";\nimport { Table, TableBody, TableCell, TableHeader, TableRow, Text, Grommet, Button, Box, CheckBox } from \"grommet\";\nimport { Trash } from \"grommet-icons\";\nconst COLUMNS = [{\n  property: \"task\",\n  label: \"Task\",\n  format: task => /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 23\n    }\n  }, task.task)\n}, {\n  property: \"limit\",\n  label: \"Limit\"\n}];\n\nfunction Todolist({\n  checked: checkedProp\n}) {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TASK); //const [checked, setChecked] = useState(!!checkedProp);\n\n  const [checked, setChecked] = useState(false); // const onChange = (event) => setChecked(event.target.checked);\n  ///\n\n  const [updateTaskCompleted] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{\n      query: TASK\n    }]\n  }); ///\n\n  const onChange = id => {\n    setChecked({\n      [id.checked]: true\n    });\n    console.log(checked); //updateTaskCompleted({ variables: { id, completed: true } });\n    //checked === false ? setChecked(true) : setChecked(false);\n    //data.tasks.map((task) =>\n    //  task.completed === true ? setChecked(true) : setChecked(false)\n    // data.tasks.map((task) =>\n    //  task.completed === true\n    //      ? updateTaskCompleted({ variables: { id, completed: false } })\n    //    : updateTaskCompleted({ variables: { id, completed: true } })\n    // );\n    //data.tasks.map((task) =>\n    //  task.completed === true ? setChecked(true) : setChecked(false)\n    //);\n  };\n\n  const deletebutton = checked === true ? /*#__PURE__*/React.createElement(Button, {\n    plain: false,\n    icon: /*#__PURE__*/React.createElement(Trash, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 35\n      }\n    }),\n    margin: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }) : null;\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{\n      query: TASK\n    }]\n  });\n\n  const deleteTasks = id => {\n    deleteTask({\n      variables: {\n        id\n      }\n    });\n  };\n  /*\n  const deletebutton =\n    checked == true ? (\n      <Button\n        plain={false}\n        icon={<Trash size=\"small\" />}\n        margin=\"small\"\n        onClick={() => deleteTasks(task.id)}\n      />\n    ) : null;\n  */\n\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return /*#__PURE__*/React.createElement(Grommet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    fill: true,\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    overflow: {\n      vertical: \"scroll\",\n      horizontal: \"auto\"\n    },\n    height: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    sortable: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, COLUMNS.map(c => /*#__PURE__*/React.createElement(TableCell, {\n    key: c.property,\n    scope: \"col\",\n    border: \"bottom\",\n    align: c.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, c.label))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, data.tasks.map(task => /*#__PURE__*/React.createElement(TableRow, {\n    key: task.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, COLUMNS.map(c => /*#__PURE__*/React.createElement(TableCell, {\n    scope: \"col\",\n    border: \"bottom\",\n    key: c.property,\n    align: c.align,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 23\n    }\n  }, c.format ? c.format(task) : task[c.property]))), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CheckBox, {\n    id: task.id,\n    checked: checked,\n    onChange: id => onChange(id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 19\n    }\n  }, deletebutton))))))));\n}\n\nexport default Todolist;","map":{"version":3,"sources":["/Users/n/my-app/src/Components/Todolist.js"],"names":["React","useState","useQuery","useMutation","EDIT_TASK_COMPLETED","TASK","DELETE_TASK","PART_TASK","Table","TableBody","TableCell","TableHeader","TableRow","Text","Grommet","Button","Box","CheckBox","Trash","COLUMNS","property","label","format","task","Todolist","checked","checkedProp","loading","error","data","setChecked","updateTaskCompleted","refetchQueries","query","onChange","id","console","log","deletebutton","deleteTask","deleteTasks","variables","vertical","horizontal","map","c","align","tasks"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { EDIT_TASK_COMPLETED, TASK, DELETE_TASK, PART_TASK } from \"./Query\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Text,\n  Grommet,\n  Button,\n  Box,\n  CheckBox,\n} from \"grommet\";\nimport { Trash } from \"grommet-icons\";\n\nconst COLUMNS = [\n  {\n    property: \"task\",\n    label: \"Task\",\n    format: (task) => <strong>{task.task}</strong>,\n  },\n  {\n    property: \"limit\",\n    label: \"Limit\",\n  },\n];\n\nfunction Todolist({ checked: checkedProp }) {\n  const { loading, error, data } = useQuery(TASK);\n  //const [checked, setChecked] = useState(!!checkedProp);\n  const [checked, setChecked] = useState(false);\n  // const onChange = (event) => setChecked(event.target.checked);\n\n  ///\n  const [updateTaskCompleted] = useMutation(EDIT_TASK_COMPLETED, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  ///\n\n  const onChange = (id) => {\n    setChecked({ [id.checked]: true });\n    console.log(checked);\n    //updateTaskCompleted({ variables: { id, completed: true } });\n    //checked === false ? setChecked(true) : setChecked(false);\n    //data.tasks.map((task) =>\n    //  task.completed === true ? setChecked(true) : setChecked(false)\n    // data.tasks.map((task) =>\n    //  task.completed === true\n    //      ? updateTaskCompleted({ variables: { id, completed: false } })\n    //    : updateTaskCompleted({ variables: { id, completed: true } })\n    // );\n    //data.tasks.map((task) =>\n    //  task.completed === true ? setChecked(true) : setChecked(false)\n    //);\n  };\n\n  const deletebutton =\n    checked === true ? (\n      <Button plain={false} icon={<Trash size=\"small\" />} margin=\"small\" />\n    ) : null;\n\n  const [deleteTask] = useMutation(DELETE_TASK, {\n    refetchQueries: [{ query: TASK }],\n  });\n\n  const deleteTasks = (id) => {\n    deleteTask({ variables: { id } });\n  };\n\n  /*\n  const deletebutton =\n    checked == true ? (\n      <Button\n        plain={false}\n        icon={<Trash size=\"small\" />}\n        margin=\"small\"\n        onClick={() => deleteTasks(task.id)}\n      />\n    ) : null;\n*/\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <Grommet>\n      <Box fill align=\"center\" justify=\"center\">\n        <Box\n          overflow={{ vertical: \"scroll\", horizontal: \"auto\" }}\n          height=\"medium\"\n        >\n          <Table sortable=\"true\">\n            <TableHeader>\n              <TableRow>\n                {COLUMNS.map((c) => (\n                  <TableCell\n                    key={c.property}\n                    scope=\"col\"\n                    border=\"bottom\"\n                    align={c.align}\n                  >\n                    <Text>{c.label}</Text>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.tasks.map((task) => (\n                <TableRow key={task.id}>\n                  {COLUMNS.map((c) => (\n                    <TableCell\n                      scope=\"col\"\n                      border=\"bottom\"\n                      key={c.property}\n                      align={c.align}\n                    >\n                      <Text>\n                        {c.format ? c.format(task) : task[c.property]}\n                      </Text>\n                    </TableCell>\n                  ))}\n                  <TableCell>\n                    <CheckBox\n                      id={task.id}\n                      checked={checked}\n                      onChange={(id) => onChange(id)}\n                    />\n                  </TableCell>\n                  <TableCell>{deletebutton}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default Todolist;\n"]},"metadata":{},"sourceType":"module"}